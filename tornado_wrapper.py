import json
from tornado.web import Application, RequestHandler
from tornado.ioloop import IOLoop
from objects.primitives import (
    create,
    Str, Int, Float,
    List, Set,
    Optional
)

mockery_signature = {
    "mocked": "Data generated by mockery."
}


def mock(return_obj):
    def inner(method):
        async def wrapper(self: RequestHandler, *args, **kwargs):
            try:
                await method(self, *args, **kwargs)
            except NotImplementedError:
                return_value = create(return_obj)
                if return_value is dict:
                    self.write({
                        **return_value,
                        **mockery_signature,
                    })
                else:
                    self.write(json.dumps(return_value))
        return wrapper
    return inner


TimeslotGroupLabel = Str(pattern=r"Every(day| Weekend| Monday| Tuesday) at( ([1-9]|11|12) (AM|PM),){4} [1-12] (AM|PM)")

TimeslotGroup = {
    "label": TimeslotGroupLabel,
    "value": {
        "dys": Set(collection=["everyday", "monday", "tuesday"]),
        "times": List({
            "hour": Optional(Int(lower=0, upper=23)),
            "minute": Int(lower=0, upper=60),
        }, limit=3)
    }
}

TimeslotGroupData = {"data": TimeslotGroup}

ListingGroupData = {
    "data": {
        "listing_ids": List(Str()),
        "timeslot_groups": List(TimeslotGroup),
    }
}


class PingHandler(RequestHandler):
    async def get(self):
        self.write(json.dumps("pong"))


class TimeslotGroupHandler(RequestHandler):
    @mock(TimeslotGroupData)
    async def get(self):
        raise NotImplementedError


class ListingGroupHandler(RequestHandler):
    @mock(ListingGroupData)
    async def get(self):
        raise NotImplementedError


OptionalObject = {
    "test": Optional(1)
}


class TestOptional(RequestHandler):
    @mock(Optional(Float()))
    async def get(self):
        raise NotImplementedError


app = Application([
        (r"/ping", PingHandler),
        (r"/timeslot-group", TimeslotGroupHandler),
        (r"/listing-group", ListingGroupHandler),
        (r"/optional", TestOptional),
    ], debug=True)

app.listen(9000)
IOLoop.current().start()
